doctype html
html
  head
    title Video Stream
    script(src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js")
    link(rel="stylesheet", href="/reset.css")
    link(rel="stylesheet", href="/global.css")
  body
    //- Header
    header 
      a(href="/") MCU Client

    //- Video Wrapper
    div(id="videoWrapper")
      //- 수신 중인 영상 데이터가 있는 경우
      if connections.length > 0
        div(class="video--available")
          each id, el in connections
            div(class="videoContainer")
              img(id="videoFrame"+id, class="videoFrame", src="/videos/"+id)
              h2(class="videoTag") 디바이스 ID #{id} 
      //- 수신 중인 영상 데이터가 없는 경우
      else
        div(class="video--empty")
          div(class="empty--warning") 수신 중인 영상 데이터가 없습니다!
          div(class="ip-port")
            div(class="key--val")
              span(class="key") IP 주소
              span(class="val") #{IP}
            div(class="key--val")
              span(class="key") Port 번호
              span(class="val") #{port}

    //- Script 태그 부분
    script.

      //- 직전에 video 있었는지 여부
      let hasVideoBefore = false;

      //- connection 데이터 갱신
      const fetchConnections = async () => {
        try {
          connections = await axios.get("/videos/count");
          return connections.data;
        } catch(err) {
          throw err;
        }
      }

      //- image 주소 fetching + 영상 데이터 최신화
      const fetchVideo = (connections) => {
        const d = new Date();
        const $ = document;
        const wrapper = $.querySelector("#videoWrapper");
        const availableWrapper = $.querySelector(".video--available");
        const emptyWrapper = $.querySelector(".video--empty");

        const on_connections = connections.map(connection => connection+'');
        const off_connections = availableWrapper ? Array.from(availableWrapper.childNodes).map(child => child.firstChild.id.slice(10)) : [];

        //- on, off 비교 (동적으로 video 영상 부착 및 제거)
        const diffing = () => {
          let result = false;
          //- on에 있다 + off에 없다 : 새로 추가된 것
          on_connections.forEach(on => {
            if(!off_connections.find(off => off === on)) {
              result = true;
              // 노드 생성 및 속성 추가
              const container = $.createElement("div");
              container.classList.add("videoContainer")
              const img = $.createElement("img");
              img.classList.add("videoFrame");
              img.setAttribute("id", "videoFrame" + on);
              const h2 = $.createElement("h2");
              h2.classList.add("videoTag");
              h2.textContent = "디바이스 ID " + on;
              // DOM에 부착
              container.appendChild(img);
              container.appendChild(h2);
              availableWrapper.appendChild(container);
              return;
            }
          })
          if(result) return;
          //- on에 없다 + off에 있다 : 제거된 것
          off_connections.forEach(off => {
            if(!on_connections.find(on => on === off)) {
              availableWrapper.removeChild(Array.from(availableWrapper.childNodes).filter(child => child.firstChild.id.slice(10) === off)[0])
              return;
            }
          })
          return;
        }

        //- 영상 데이터 있는 경우 DOM node 생성
        const createAvailableWrapper = () => {
          const container = $.createElement("div");
          container.classList.add("video--available");
          return container;
        }

        //- 영상 데이터 없는 경우 DOM node 생성
        const createEmptyWrapper = () => {
          const createKeyVal = () => {
            const key_val = $.createElement("div");
            key_val.classList.add("key--val");
            return key_val;
          }

          const createKey = (content) => {
            const key = $.createElement("span");
            key.classList.add("key");
            key.textContent = content;
            return key;
          }

          const createVal = (content) => {
            const val = $.createElement("span");
            val.classList.add("val");
            val.textContent = content;
            return val;
          }

          const container = $.createElement("div");
          container.classList.add("video--empty");
          const warning = $.createElement("div");
          warning.classList.add("empty--warning");
          warning.textContent="수신 중인 영상 데이터가 없습니다!";
          const ip_port = $.createElement("div");
          ip_port.classList.add("ip-port");
          const ip = createKeyVal();
          ip.appendChild(createKey("IP 주소"));
          ip.appendChild(createVal(`#{IP}`));
          const port = createKeyVal();
          port.appendChild(createKey("Port 번호"));
          port.appendChild(createVal(`#{port}`));

          ip_port.appendChild(ip);
          ip_port.appendChild(port);
          container.appendChild(warning);
          container.appendChild(ip_port);

          return container;
        }

        if(connections.length > 0) {
          if(!hasVideoBefore) {
            wrapper.innerHTML = '';
            wrapper.appendChild(createAvailableWrapper());
            hasVideoBefore = true;
          }
          diffing();
          
          connections.forEach(id => {
          let res = $.getElementById('videoFrame'+id).src = "/videos/"+id+"?" + d.getTime();
        })
        }
        else {
          wrapper.innerHTML = '';
          wrapper.appendChild(createEmptyWrapper());
          hasVideoBefore = false;
        }

      };

      // interval Wrapper
      const intervalConstructor = async () => {
        let connections = [#{connections}];
        try {
          //- 2초 간격으로 비디오 데이터 갱신
          setInterval(async() => {
            connections = await fetchConnections();
          }, 1000)
        } catch(err) {
          consol.log(err)
        }

        //- 0.1초 간격으로 비디오 데이터 받아옴
        setInterval(() => {
          fetchVideo(connections);
        }, 100);
      }

      // window load된 경우 intervalConstructor 실행
      window.onload = intervalConstructor;